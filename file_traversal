nclude <stdio.h>
#include <dirent.h>
#include <limits.h>
#include <ctype.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <string.h>
#include <time.h>

/*func function type that is called for each filename */

typedef int Myfunc(const char *, const struct stat *, int);

static Myfunc myfunc;
static int myftw(char *, Myfunc *);
static int dopath(Myfunc *);
//static int string_search(char *);

static char * pathname;
static char * String;
static char * fileType;
static int f_flag = 0;
static int l_flag = 0;


//static size_t pathlen;           /* contains full pathname for every file */

static char *fullpath; //malloc(PATH_MAX+1);
static size_t pathlen;

int
main(int argc, char *argv[])
{

int ret;
opterr = 0;
int c = 0;


 while ((c = getopt (argc, argv, "p:f:ls:")) != -1)
        switch (c) {
        case 'p':
                pathname = optarg;
                break;
        case 'f':
                f_flag = 1;
                if(strcmp(optarg, "h") == 0){
                        fileType = ".h";
                        break;
                }
                if(strcmp(optarg, "c") == 0){
                        fileType = ".c";
                        break;
                }
                if(strcmp(optarg, "S") == 0){
                       fileType = ".S";
                        break;
                }

        case 'l':
                l_flag = 1;
                break;
        case 's':
                String = optarg;
                /*if(reg_expression_check(String) == 1){
                        printf("error incorrect string type");
                        return(ret);
                }*/
                break;
        case '?':
                if (optopt == 'c')
                        fprintf (stderr, "Option -%c requires an argument.\n", optopt);
                else if (isprint (optopt))
                        fprintf (stderr, "Unknown option `-%c'.\n", optopt);
                else
                fprintf (stderr,
                        "Unknown option character `\\c%x'.\n",
                        optopt);
       default:
        abort();
        }
/*
printf("pathname %s, \n", pathname);
printf("f_flag %d, \n",  f_flag);
printf("l_flag %d, \n",  l_flag);
printf("s_flag %s, \n", String);
printf("filetype %s \n", fileType);
*/
clock_t begin = clock();

ret = myftw(pathname, myfunc);

clock_t end = clock();

double time_spent = (double)(end- begin)/CLOCKS_PER_SEC;
printf("time_spent %f", time_spent);

free(fullpath);
return ret;

}
/*
* Descend through the hierarchy, starting at "fullpath".
* If "fullpath" is anything other than a directory, we lstat() it,
* call func(), and return.  For a directory, we call ourself
* recursively for each name in the directory.
*/
static int                                      /* we return whatever func() returns */
myftw(char *pathname, Myfunc *func)
{
        fullpath = malloc(PATH_MAX+1);  /* malloc PATH_MAX+1 bytes */
        /*
        if (pathlen <= strlen(pathname)) {
                pathlen = strlen(pathname) * 2;
                if ((fullpath = realloc(fullpath, pathlen)) == NULL)
                        return 0;//err_sys("realloc failed");
        }
        */
        strncpy(fullpath, pathname, (PATH_MAX+1));
        fullpath[(PATH_MAX-1)] =0;
        return(dopath(func));
}

#define FTW_F   1               /* file other than directory */
#define FTW_D   2               /* directory */
#define FTW_DNR 3               /* directory that can't be read */
#define FTW_NS  4               /* file that we can't stat */

static int                              /* we return whatever func() returns */
dopath(Myfunc* func)
{

 struct stat statbuf;
 struct dirent *dirp;
 DIR *dp;
 int ret;
 char *ptr;


        if (lstat(fullpath, &statbuf) < 0) {

                return(func(fullpath, &statbuf, FTW_NS));
        }
        if (S_ISDIR(statbuf.st_mode) == 0) /* not a directory */
                return(func(fullpath, &statbuf, FTW_F));

        if ((ret = func(fullpath, &statbuf, FTW_D)) != 0)
                return(ret);

        ptr = fullpath + strlen(fullpath); /* point to end of fullpath */
        *ptr++ = '/';
        *ptr = 0;

        if ((dp = opendir(fullpath)) == NULL) /* can't read directory */
                return(func(fullpath, &statbuf, FTW_DNR));

        while ((dirp = readdir(dp)) != NULL) {
                if (strcmp(dirp->d_name, ".") == 0 ||
                   strcmp(dirp->d_name, "..") == 0)
                        continue; /* ignore dot and dot-dot */
                strcpy(ptr, dirp->d_name); /* append name after slash */
                if ((ret = dopath(func)) != 0) /* recursive */
                         break; /* time to leave */
        }
        ptr[-1] = 0; /* erase everything from slash onwards */

        if (closedir(dp) < 0){
                printf("can't close directory %s", fullpath);
        }
        return(ret);
}

static int
myfunc(const char *pathname, const struct stat *statbuf, int type)
{

FILE * file;
char * r = "r";
int i;
                                           
char* file_compare = pathname + (strlen(pathname)-2);

//ifdyou have the l_flag set and its a symlink open it 

size_t len;

char buf[PATH_MAX+1];

//  if its a symlink, use readlink to get the name of the file it refers to 

if(((statbuf->st_mode) & S_IFMT) == S_IFLNK && l_flag == 1){

        if(len = readlink(pathname, buf, sizeof(buf)))

                buf[len] = '\0';

}
// if flag is == 1 and want to find the string, this is the for loop for you!!
if(f_flag == 1){

if(strcmp(file_compare, fileType) == 0){

        // if its a symlink
        if(((statbuf->st_mode) & S_IFMT) == S_IFLNK && l_flag == 1){

                char * buffer = malloc(statbuf->st_size);
                file = fopen(buf, r);

                if (file == NULL){
                        printf("Error: the file is null");
                        return 1;
                }

                else{
                        off_t filesize = statbuf->st_size;
                        while(fgets(buffer, filesize , file) != NULL){
                        if((strstr(buffer, String)) != NULL)
                                printf("match for %s in  %s \n", String, buf);
                                return 0;
                                                           
                      }
                }
        }
        //otherwise its not a symlink!
      else{

               char * buffer = malloc(statbuf->st_size);
                file = fopen(pathname, r);

                if (file == NULL){
                        printf("Error: the file is null");
                        return 1;
                }


                else{
                        off_t filesize = statbuf->st_size;
                        while(fgets(buffer, filesize , file) != NULL){
                        if((strstr(buffer, String)) != NULL)
                                printf("match for %s in  %s \n", String, pathname);
                                return 0;
                        }
                }
        }

}
}

// if f_flag isnt set you want to search all the regular files files

if( f_flag ==0 && ((((statbuf->st_mode) & S_IFMT) == S_IFREG) || ((statbuf->st_mode) & S_IFMT) == S_IFLNK)){

//if you have the l_flag set and its a symlink open it 
        if(((statbuf->st_mode) & S_IFMT) == S_IFLNK && l_flag == 1){

                char * buffer = malloc(statbuf->st_size);
                file = fopen(buf, r);

                if (file == NULL){
                        printf("Error: the file is null");
                        return 1;
                                                         
         }

                else{
                        off_t filesize = statbuf->st_size;
                        while(fgets(buffer, filesize , file) != NULL){
                        if((strstr(buffer, String)) != NULL)
                                printf("match for %s in  %s \n", String, buf);
                                return 0;
                        }
                }
        }
        //if its not the symlink just open it
        else{

               char * buffer = malloc(statbuf->st_size);
                file = fopen(pathname, r);

                if (file == NULL){
                        printf("Error: the file is null");
                        return 1;
                }


                else{
                        off_t filesize = statbuf->st_size;
                        while(fgets(buffer, filesize , file) != NULL){
                        if((strstr(buffer, String)) != NULL)
                                printf("match for %s in  %s \n", String, pathname);
                                return 0;
                        }
                }
        }


}

return 0;

}

